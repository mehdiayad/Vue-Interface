{"remainingRequest":"/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Med/Desktop/Perso/WEB/vue-interface/src/components/ProductShow.vue?vue&type=template&id=3265b6e8&","dependencies":[{"path":"/Users/Med/Desktop/Perso/WEB/vue-interface/src/components/ProductShow.vue","mtime":1583529771905},{"path":"/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/cache-loader/dist/cjs.js","mtime":1583024834205},{"path":"/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/cache-loader/dist/cjs.js","mtime":1583024834205},{"path":"/Users/Med/Desktop/Perso/WEB/vue-interface/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}